{"version":3,"sources":["Components/Card/Card.component.tsx","Components/CardList/CardList.component.tsx","Components/Search-Box/SearchBoxComponent.tsx","Components/GenericComponents/H1.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","className","alt","src","this","props","id","monster","email","React","Component","CardList","monsters","map","key","name","SearchBox","type","placeholder","placeHolder","onChange","handleChange","H1","text","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","filterMonsters","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+VASqBA,G,yLAEnB,OACC,yBAAKC,UAAU,kBACd,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,4BACtB,4BAAKF,KAAKC,MAAME,SAChB,2BAAIH,KAAKC,MAAMG,Y,GANeC,IAAMC,YCF3BC,EAAb,uKAEE,OACC,yBAAKV,UAAU,YACdG,KAAKC,MAAMO,SAASC,KAAI,SAACN,GAAD,OACvB,kBAAC,EAAD,CAAMO,IAAKP,EAAQD,GAAIE,MAAOD,EAAQC,MAAOF,GAAIC,EAAQD,GAAIC,QAASA,EAAQQ,eALnF,GAA8BN,IAAMC,WCYrBM,G,MAZ4C,SAAAX,GAC1D,OACC,6BACC,2BACCJ,UAAU,SACVgB,KAAK,SACLC,YAAab,EAAMc,YACnBC,SAAUf,EAAMgB,kBCDLC,G,MAR8B,SAAAjB,GACzC,OACI,oCACI,wBAAIJ,UAAY,MAAMI,EAAMkB,SCEnBC,E,kDAEpB,WAAYnB,GAAa,IAAD,8BACvB,cAAMA,IAeCgB,aAAe,SAACI,GACvB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACZlB,SAAU,GACVe,YAAa,IAJS,E,gEAUH,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEd,SAAUuB,S,+BAOb,IAAD,EACM/B,KAAK0B,MAA/BlB,EADoB,EACpBA,SAAUe,EADU,EACVA,YACZS,EAAiBxB,EAASyB,QAAO,SAAC9B,GAAD,OACtCA,EAAQQ,KAAKuB,cAAcC,SAASZ,EAAYW,kBAEjD,OACC,yBAAKrC,UAAU,OACd,kBAAC,EAAD,CAAIsB,KAAK,qBACT,kBAAC,EAAD,iBAAenB,KAAKC,MAApB,CACCc,YAAY,kBACZE,aAAcjB,KAAKiB,gBACnBe,EAAeI,OACb,kBAAC,EAAD,CAAU5B,SAAUwB,IACpB,4BAAK,gC,GAnCqB1B,aCEb+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65ad81d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.styles.css';\r\n\r\nexport interface CardProps {\r\n\tmonster: string;\r\n\tid: string;\r\n\temail: string;\r\n}\r\n\r\nexport default class Card extends React.Component<CardProps> {\r\n\tpublic render(): JSX.Element {\r\n\t\treturn (\r\n\t\t\t<div className=\"card-container\">\r\n\t\t\t\t<img alt=\"monster\" src={`https://robohash.org/${this.props.id}?set=set2&size=180x180`} />\r\n\t\t\t\t<h1>{this.props.monster}</h1>\r\n\t\t\t\t<p>{this.props.email}</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport './CardList.styles.css'\r\nimport Card from '../Card/Card.component';\r\n\r\nexport interface CardListProps {\r\n\tmonsters: any\r\n}\r\nexport class CardList extends React.Component<CardListProps> {\r\n\tpublic render(): JSX.Element {\r\n\t\treturn (\r\n\t\t\t<div className=\"cardList\">{\r\n\t\t\t\tthis.props.monsters.map((monster: { name: string; id: string; email: string }) => (\r\n\t\t\t\t\t<Card key={monster.id} email={monster.email} id={monster.id} monster={monster.name} />\r\n\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport './SearchBox.css'\r\ninterface SearchBoxProps {\r\n\tplaceHolder: string;\r\n\thandleChange: any;\r\n}\r\n\r\nconst SearchBox: React.FunctionComponent<SearchBoxProps> = props => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"search\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tplaceholder={props.placeHolder}\r\n\t\t\t\tonChange={props.handleChange} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport './GenericStyles.css'\r\ninterface H1Props {\r\n    text: string;\r\n}\r\nconst H1: React.FunctionComponent<H1Props> = props => {\r\n    return (\r\n        <>\r\n            <h1 className = \"h1\">{props.text}</h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default H1;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './Components/CardList/CardList.component';\nimport SearchBox from './Components/Search-Box/SearchBoxComponent';\nimport H1 from './Components/GenericComponents/H1';\n\ninterface AppState {\n\tmonsters: [];\n\tsearchField: string;\n}\nexport default class App extends Component<{}, AppState> {\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: ''\n\t\t}\n\t\t// this.handleChange = this.handleChange.bind(this); //This is done if you're not using an Arrow function -cont...\n\t\t//...This is done because- \"JavaScript by default doesn't set its scopt of the state on functions.\"\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({ monsters: users }))\n\t}\n\n\tprivate handleChange = (e: any): void => {\n\t\tthis.setState({ searchField: e.target.value })\n\t}\n\n\tpublic render(): JSX.Element {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filterMonsters = monsters.filter((monster: { name: string }) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<H1 text=\"Monsters Rolodex\" />\n\t\t\t\t<SearchBox {...this.props}\n\t\t\t\t\tplaceHolder=\"Search Monsters\"\n\t\t\t\t\thandleChange={this.handleChange} />\n\t\t\t\t{filterMonsters.length\n\t\t\t\t\t? <CardList monsters={filterMonsters} />\n\t\t\t\t\t: <h1>{\"Oops...No Results Found\"}</h1>}\n\t\t\t</div>\n\t\t)\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}